{"version":3,"sources":["config.ts","utils.ts","api.ts","models/filters/DateFilter.ts","models/filters/ParticipantsFilter.ts","models/filters/SeverityFilter.ts","models/filters/RegionFilter.ts","models/filters/CategoryFilter.ts","models/FilterStore.ts","components/ui/Colors.tsx","components/SvgIcon.tsx","components/InfoBalloon.tsx","models/MapStore.ts","models/AreaStore.ts","models/TrafficAccidentStore.ts","models/RootStore.ts","components/Loader.js","components/Map/Map.js","components/FilterPanel/DateFilter.js","components/FilterPanel/ParticipantsFilter.tsx","components/FilterPanel/SeverityFilter.tsx","components/FilterPanel/RegionFilter.js","components/FilterPanel/FilterPanelNormal.js","components/FilterPanel/FilterPanelHidden.js","components/FilterPanel/CategoryHeader.js","components/FilterPanel/FilterPanelCategory.js","components/FilterPanel/FilterPanel.js","components/InfoPanel.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["areaController","dtpController","fetchArea","center","zoom","abort","AbortController","fetch","config","signal","then","response","json","cache","fetchDtp","years","region","Promise","all","map","y","year","result","resolve","data","fetchDtpYear","DateValue","types","model","start_date","string","end_date","DateFilter","name","literal","label","default_value","value","optional","actions","self","afterCreate","setValue","cast","getRoot","onDatesChanged","ParticipantItem","preview","number","icon","default","boolean","selected","setSelected","selectOne","getParent","forEach","v","onFiltersChanged","ParticipantsFilter","multiple","values","array","SeverityItem","color","disabled","changeSelection","SeverityFilter","RegionFilter","CategoryFilterValue","toggle","reset","CategoryFilter","key","navigate","filterStore","setCurrentKey","union","convertFilter","filter","create","FilterStore","filters","visible","search","currentKey","maybeNull","setFilters","clear","loadFilters","flow","loadFiltersForArea","updateStreets","accidents","streetFilter","find","f","streets","Set","a","street","selectedStreets","s","add","sortedStreets","Array","from","sort","streetValues","has","setVisible","setSearch","views","dateFilters","this","date","Colors","SvgIcon","className","style","fill","xlinkHref","InfoBalloonContent","props","dateTime","datetime","toLocaleString","month","day","hour","minute","injuredMessage","injured","deadMessage","dead","Fragment","categoryName","address","href","id","target","rel","supportedIconsBySeverity","0","1","3","4","colorBySeverity","MapStore","objectManager","heatmap","updateBounds","prevZoom","onBoundsChanged","handlerClickToObj","objectId","obj","objects","getById","properties","balloonContentBody","ReactDOMServer","renderToStaticMarkup","category_name","Date","balloon","open","handlerActiveChanged","handlerOpenBalloon","currentParams","URLSearchParams","document","location","set","window","history","pushState","toString","handlerCloseBalloon","delete","setMap","mapInstance","ymaps","ObjectManager","clusterize","groupByCoordinates","showInAlphabeticalOrder","clusterDisableClickZoom","clusterIconLayout","events","ev","get","clusters","state","Heatmap","radius","dissipating","opacity","intensityOfMidpoint","gradient","0.2","0.4","0.6","0.8","geoObjects","getCenter","getZoom","getMap","drawPoints","accs","removeAll","setData","type","acc","geometry","coordinates","point","latitude","longitude","clusterCaption","split","options","iconLayout","iconImageHref","severity","iconImageSize","iconImageOffset","iconColor","activeObject","drawHeat","weight","setFilter","Area","parentId","parentName","AreaStatistics","count","AreaStore","area","statistics","loadArea","Object","keys","length","newArea","region_slug","region_name","parent_region_slug","parent_region_name","areaChanged","parentChanged","onAreaChanged","onParentAreaChanged","setStatistics","stat","getYears","startDate","endDate","start","parseInt","end","i","push","TrafficAccidentStore","frozen","loadTrafficAccidents","root","incLoading","flat","onTrafficAccidentsLoaded","decLoading","rootStore","mapStore","areaStore","trafficAccidentStore","loadingCount","initBoundsChanged","initFiltersLoaded","setMapFromUrl","setDatesFromUrl","setFiltersFromUrl","updateUrl","loadAccs","updateStat","areaAccs","prepareFilter","reduce","selection","buildSelection","slice","item","selectedValues","isArray","some","includes","passFilters","redraw","visibleAccs","updateUrlMap","updateUrlDates","updateUrlFilters","String","join","params","centerStr","parseFloat","zoomStr","dateFilter","fv","setStreetsFromUrl","makeInspectable","RootStoreContext","React","createContext","useStore","useContext","Loader","observer","Map","boundsChangeHandler","useCallback","e","originalEvent","newCenter","newZoom","newBounds","useEffect","ready","controls","avoidFractionalZoom","float","size","updatePos","h","top","right","mapRef","current","offsetHeight","useRef","ref","formatDate","format","formatRange","range","getPrevMonth","n","p","subMonths","locale","ruLocale","toLocaleUpperCase","substring","startOfMonth","lastDayOfMonth","staticRanges","getFullYear","createStaticRanges","getStaticRanges","defaultRange","parseISO","useState","show","setShow","setRange","onFocus","readOnly","onChange","showDateDisplay","months","ranges","rangeColors","inputRanges","fixedHeight","direction","onClick","tabIndex","aria-label","checked","background","FilterSection","CategoryTag","FilterPanelNormal","mainFilters","categoryFilters","FilterPanelHidden","text","placeholder","CategoryValue","FilterPanelCategory","q","toLowerCase","InfoPanelObservable","App","Provider","Boolean","hostname","match","Sentry","dsn","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.011323a2.chunk.js","sourcesContent":["export default {\n  API_URL: 'https://beta.dtp-stat.ru/api',\n  STATIC_URL: 'https://beta.dtp-stat.ru',\n  SENTRY_URL: 'https://2ab4410dbc6440a7ab3bfd0963c217d5@o412018.ingest.sentry.io/5288112',\n}\n","export const POINTS_ZOOM = 12\n\nexport function debounce(func: Function, wait: number, immediate: boolean = false) {\n  let timeout: any = null\n  return function () {\n    // @ts-ignore\n    const context = this,\n      args = arguments\n    const later = function () {\n      timeout = null\n      if (!immediate) func.apply(context, args)\n    }\n    var callNow = immediate && !timeout\n    clearTimeout(timeout)\n    timeout = setTimeout(later, wait)\n    if (callNow) func.apply(context, args)\n  }\n}\n\nexport const isEmpty = (obj: Object) => Object.keys(obj).length === 0\n","import config from 'config'\nimport { Coordinate, FilterResponse, ShortStatisticsResponse } from 'types'\n\nexport const fetchFilters = (): Promise<FilterResponse[]> =>\n  fetch(`${config.API_URL}/filters`).then((response) => response.json())\n\nvar areaController: AbortController | null\n\nexport const fetchArea = (center: Coordinate, zoom: number): Promise<ShortStatisticsResponse> => {\n  areaController?.abort()\n  areaController = new AbortController()\n  return fetch(`${config.API_URL}/stat/?center_point=${center[1]}+${center[0]}&scale=${zoom}`, {\n    signal: areaController.signal,\n  }).then((response) => response.json())\n}\n\nconst cache: any = {}\n\nconst fetchDtpYear = (signal: AbortSignal, year: number, region: string) => {\n  const result = cache[region]?.[year]\n  if (result) {\n    return Promise.resolve(result)\n  }\n  return fetch(`${config.API_URL}/dtp_load/?year=${year}&region_slug=${region}&format=json`, {\n    signal,\n  })\n    .then((response) => response.json())\n    .then((data) => {\n      if (!cache[region]) {\n        cache[region] = {}\n      }\n      cache[region][year] = data\n      return data\n    })\n}\n\nvar dtpController: AbortController | null\n\nexport const fetchDtp = (years: number[], region: string) => {\n  dtpController?.abort()\n  dtpController = new AbortController()\n  return Promise.all(years.map((y) => fetchDtpYear(dtpController!.signal, y, region)))\n}\n","import { Instance, types, cast, getRoot } from 'mobx-state-tree'\n\nimport { RootStoreType } from '../RootStore'\n\nconst DateValue = types.model('DateValue', {\n  start_date: types.string,\n  end_date: types.string,\n})\n\nexport const DateFilter = types\n  .model('DateFilter', {\n    name: types.literal('date'),\n    label: types.string,\n    default_value: DateValue,\n    // values: types.array(types.string),\n    value: types.optional(DateValue, { start_date: '', end_date: '' }), // TODO?\n  })\n  .actions((self) => {\n    const afterCreate = () => {\n      self.value = self.default_value\n    }\n    const setValue = (value: any) => {\n      self.value = cast(value)\n      getRoot<RootStoreType>(self).onDatesChanged()\n    }\n    return {\n      afterCreate,\n      setValue,\n    }\n  })\n\nexport type DateFilterType = Instance<typeof DateFilter>\n","import { types, getParent, getRoot, Instance } from 'mobx-state-tree'\n\nimport { RootStoreType } from '../RootStore'\n\nconst ParticipantItem = types\n  .model('ParticipantItem', {\n    preview: types.string,\n    value: types.number,\n    icon: types.string,\n    default: types.boolean,\n    selected: false,\n  })\n  .actions((self) => {\n    const afterCreate = () => {\n      self.selected = self.default\n    }\n    const setSelected = (value: boolean) => {\n      self.selected = value\n    }\n    const selectOne = () => {\n      if (!self.selected) {\n        // @ts-ignore\n        getParent(self).forEach((v) => {\n          v.setSelected(v === self)\n        })\n        getRoot<RootStoreType>(self).onFiltersChanged()\n      }\n    }\n    return {\n      afterCreate,\n      setSelected,\n      selectOne,\n    }\n  })\n\nexport const ParticipantsFilter = types.model('ParticipantsFilter', {\n  name: types.literal('participant_categories'),\n  label: types.string,\n  multiple: types.boolean,\n  values: types.array(ParticipantItem),\n})\n\nexport type ParticipantsFilterType = Instance<typeof ParticipantsFilter>\n","import { types, Instance, getRoot } from 'mobx-state-tree'\n\nimport { RootStoreType } from '../RootStore'\n\nconst SeverityItem = types\n  .model('SeverityItem', {\n    preview: types.string,\n    value: types.number,\n    color: types.string,\n    disabled: types.boolean,\n    default: types.boolean,\n    selected: false,\n  })\n  .actions((self) => {\n    const afterCreate = () => {\n      self.selected = self.default\n    }\n    function changeSelection() {\n      self.selected = !self.selected\n      getRoot<RootStoreType>(self).onFiltersChanged()\n    }\n    return {\n      afterCreate,\n      changeSelection,\n    }\n  })\n\nexport const SeverityFilter = types.model('SeverityFilter', {\n  name: types.literal('severity'),\n  label: types.string,\n  multiple: types.boolean,\n  values: types.array(SeverityItem),\n})\n\nexport type SeverityFilterType = Instance<typeof SeverityFilter>\n","import { types, Instance } from 'mobx-state-tree'\n\nexport const RegionFilter = types.model('RegionFilter', {\n  name: types.literal('region'),\n  label: types.string,\n  values: types.array(types.number),\n})\n\nexport type RegionFilterType = Instance<typeof RegionFilter>\n","import { types, Instance, getRoot } from 'mobx-state-tree'\n\nimport { RootStoreType } from '../RootStore'\n\nexport const CategoryFilterValue = types\n  .model('CategoryFilterValue', {\n    preview: types.string,\n    value: types.number, // -1 for street\n    default: false,\n    selected: false,\n  })\n  .actions((self) => {\n    const toggle = () => {\n      self.selected = !self.selected\n      getRoot<RootStoreType>(self).onFiltersChanged()\n    }\n    const reset = () => {\n      self.selected = self.default\n    }\n    return {\n      toggle,\n      reset,\n    }\n  })\n\nexport const CategoryFilter = types\n  .model('CategoryFilter', {\n    name: types.literal('category'),\n    key: types.string,\n    label: types.string,\n    values: types.array(CategoryFilterValue),\n  })\n  .actions((self) => ({\n    reset() {\n      self.values.forEach((v) => v.reset())\n      // if (self.key === 'street') {\n      //   getRoot<RootStoreType>(self).updateStreets() TODO // clear previously selected streets from another region\n      // }\n      getRoot<RootStoreType>(self).onFiltersChanged()\n    },\n    navigate() {\n      getRoot<RootStoreType>(self).filterStore.setCurrentKey(self.key)\n    },\n  }))\n\nexport type CategoryFilterType = Instance<typeof CategoryFilter>\n","import { types, flow, cast, Instance } from 'mobx-state-tree'\n\nimport { fetchFilters } from 'api'\n\nimport { DateFilter, DateFilterType } from './filters/DateFilter'\nimport { ParticipantsFilter } from './filters/ParticipantsFilter'\nimport { SeverityFilter } from './filters/SeverityFilter'\nimport { RegionFilter } from './filters/RegionFilter'\nimport { CategoryFilter, CategoryFilterType, CategoryFilterValue } from './filters/CategoryFilter'\n\nconst Filter = types.union(\n  ParticipantsFilter,\n  DateFilter,\n  SeverityFilter,\n  RegionFilter,\n  CategoryFilter\n)\n\nexport type FilterType = Instance<typeof Filter>\n\nfunction convertFilter(filter: any): any {\n  switch (filter.name) {\n    case 'date':\n      return DateFilter.create(filter)\n    case 'participant_categories':\n      return ParticipantsFilter.create(filter)\n    case 'severity':\n      return SeverityFilter.create(filter)\n    case 'region':\n      return RegionFilter.create(filter)\n    case 'category':\n      return CategoryFilter.create(filter)\n  }\n}\n\nexport const FilterStore = types\n  .model('FilterStore', {\n    filters: types.array(\n      types.union(ParticipantsFilter, DateFilter, SeverityFilter, RegionFilter, CategoryFilter)\n    ),\n    visible: true,\n    search: '',\n    currentKey: types.maybeNull(types.string),\n  })\n  .actions((self) => {\n    function setFilters(filters: any[]) {\n      self.filters.clear()\n      self.filters = cast(filters.map(convertFilter)) || []\n    }\n    const updateStreets = (accidents: any[]) => {\n      if (accidents) {\n        const streetFilter = self.filters.find((f: any) => f.key === 'street') as CategoryFilterType\n        if (streetFilter) {\n          const streets = new Set(accidents.filter((a) => a.street).map((a) => a.street))\n          const selectedStreets = new Set(\n            streetFilter.values.filter((v) => v.selected).map((s) => s.preview)\n          )\n          selectedStreets.forEach((s) => {\n            streets.add(s)\n          })\n          const sortedStreets = Array.from(streets)\n          sortedStreets.sort()\n          const streetValues = sortedStreets.map((s) =>\n            CategoryFilterValue.create({ preview: s, value: -1, selected: selectedStreets.has(s) })\n          )\n          streetFilter.values = cast(streetValues)\n        }\n      }\n    }\n    const loadFilters = flow(function* loadFiltersForArea() {\n      const response = yield fetchFilters()\n      setFilters(response)\n    })\n    const setCurrentKey = (key: string) => {\n      self.currentKey = key\n    }\n    const setVisible = (visible: boolean) => {\n      self.visible = visible\n    }\n    const setSearch = (s: string) => {\n      self.search = s\n    }\n    return {\n      setFilters,\n      updateStreets,\n      loadFilters,\n      setCurrentKey,\n      setVisible,\n      setSearch,\n    }\n  })\n  .views((self) => ({\n    get date() {\n      const dateFilters = self.filters.filter((f) => f.name === 'date') as DateFilterType[]\n      return dateFilters?.[0]\n    },\n\n    get startDate() {\n      return this.date?.value.start_date\n    },\n\n    get endDate() {\n      return this.date?.value.end_date\n    },\n  }))\n","// duplicate of styles in scss\nexport const Colors: { [key: string]: string } = {\n  $black: '#000',\n  $white: '#fff',\n  $white2: '#f2f2f2',\n  $greyLight: '#F4F8FA',\n  $greyDark: '#18334A',\n  $grey10: '#e8ebed',\n  $grey20: '#ccd2d7',\n  $grey50: '#8d99a5',\n  $grey70: '#586c7c',\n  $greyMiddle: '#EBEEF0',\n  $red: '#FF001A',\n  $red10: '#FF001A',\n  $red20: '#f9cdcd',\n  $yellow: '#FFB81F',\n  $yellow10: '#fff8e9',\n  $green: '#17AA14',\n}\n","import React from 'react'\n\ntype Props = { name: string; color?: string }\n\nconst SvgIcon = ({ name, color }: Props) => {\n  return (\n    <svg className={`icon icon-${name}`} style={{ fill: color ? color : '' }}>\n      <use xlinkHref={`svg/sprite.svg#${name}`}></use>\n    </svg>\n  )\n}\n\nexport default SvgIcon\n","import React from 'react'\n\nimport config from 'config'\n\nimport { Colors } from './ui/Colors'\nimport SvgIcon from './SvgIcon'\n\ninterface Props {\n  id: string\n  address: string\n  categoryName: string\n  datetime: Date\n  dead: number\n  injured: number\n}\n\nexport const InfoBalloon = (props: Props) => (\n  <div className='balloon'>\n    <InfoBalloonContent {...props} />\n    <SvgIcon name='pointer' />\n  </div>\n)\n\nexport const InfoBalloonContent = (props: Props) => {\n  const dateTime = props.datetime.toLocaleString('ru', {\n    year: 'numeric',\n    month: 'numeric',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n  })\n\n  let injuredMessage = `${props.injured} человек пострадали`\n  if (props.injured % 10 === 1 && props.injured !== 11) {\n    injuredMessage = `${props.injured} человек пострадал`\n  }\n\n  let deadMessage = `${props.dead} человек погибли`\n  if (props.dead % 10 === 1 && props.dead !== 11) {\n    deadMessage = `${props.dead} человек погиб`\n  }\n\n  return (\n    <React.Fragment>\n      <div className='balloon-header'>\n        <h4 className='subtitle1'>{props.categoryName}</h4>\n      </div>\n      <div className='balloon-body'>\n        <p className='body3'>{dateTime}</p>\n        <p className='body3'>{props.address}</p>\n        {props.injured > 0 && (\n          <p className='subtitle3' style={{ color: Colors.$yellow }}>\n            {injuredMessage}\n          </p>\n        )}\n        {props.dead > 0 && (\n          <p className='subtitle3' style={{ color: Colors.$red }}>\n            {deadMessage}\n          </p>\n        )}\n      </div>\n      <div className='balloon-footer'>\n        <a\n          className='btn-light'\n          href={`${config.STATIC_URL}/dtp/${props.id}`}\n          target='_blank'\n          rel='noopener noreferrer'\n        >\n          Подробности ДТП\n        </a>\n      </div>\n    </React.Fragment>\n  )\n}\n","import { cast, types, getRoot } from 'mobx-state-tree'\nimport ReactDOMServer from 'react-dom/server'\n\nimport { Coordinate } from 'types'\n\nimport { RootStoreType } from './RootStore'\nimport { InfoBalloon, InfoBalloonContent } from '../components/InfoBalloon'\n\nconst supportedIconsBySeverity = {\n  0: 'svg/circle-0.svg',\n  1: 'svg/circle-1.svg',\n  3: 'svg/circle-3.svg',\n  4: 'svg/circle-4.svg',\n  default: 'svg/circle-default.svg',\n}\n\nconst colorBySeverity = {\n  1: '#FFB81F',\n  3: '#FF7F24',\n  4: '#FF001A',\n}\n\nexport const buildSelection = (filters: any[]) => {\n  const selection: any[] = []\n  for (let filter of filters.filter((f) => f.name !== 'date')) {\n    const values = filter.values\n      .filter((v: any) => v.selected)\n      .map((v: any) => (v.value === -1 ? v.preview : v.value))\n    selection.push({ id: filter.key || filter.name, values })\n  }\n  return selection\n}\n\nexport const passFilters = (item: any, selection: any[]): boolean => {\n  for (let filter of selection) {\n    const value = item[filter.id]\n    const selectedValues = filter.values\n    if (selectedValues.length === 0) {\n      continue\n    }\n    if (Array.isArray(value)) {\n      if (!value.some((v) => selectedValues.includes(v))) {\n        return false\n      }\n    } else {\n      if (!selectedValues.includes(value)) {\n        return false\n      }\n    }\n  }\n  return true\n}\n\nexport const MapStore = types\n  .model('MapStore', {\n    center: types.array(types.number),\n    zoom: 1,\n  })\n  .actions((self) => {\n    // TODO: improve types\n    let map: any = null\n    let objectManager: any = null\n    let heatmap: any = null\n\n    function updateBounds(center: Coordinate, zoom: number) {\n      const prevZoom = self.zoom\n      self.center = cast(center)\n      self.zoom = zoom\n      getRoot<RootStoreType>(self).onBoundsChanged(zoom, prevZoom)\n    }\n\n    const getMap = () => map\n\n    function setMap(mapInstance: any) {\n      map = mapInstance\n\n      // @ts-ignore\n      objectManager = new window.ymaps.ObjectManager({\n        clusterize: true,\n        groupByCoordinates: true,\n        showInAlphabeticalOrder: true,\n        clusterDisableClickZoom: true,\n        clusterIconLayout: 'default#pieChart',\n      })\n\n      objectManager.objects.events.add('click', (ev: { get: (arg0: string) => string }) => {\n        handlerClickToObj(ev.get('objectId'))\n      })\n      objectManager.objects.balloon.events.add('userclose', () => {\n        handlerCloseBalloon()\n      })\n      objectManager.objects.balloon.events.add('open', (ev: { get: (arg0: string) => string }) => {\n        handlerOpenBalloon(ev.get('objectId'))\n      })\n      objectManager.clusters.balloon.events.add('close', () => {\n        handlerCloseBalloon()\n      })\n      objectManager.clusters.state.events.add('change', () => {\n        handlerActiveChanged(objectManager.clusters.state.get('activeObject'))\n      })\n      objectManager.clusters.balloon.events.add('close', () => {\n        handlerCloseBalloon()\n      })\n\n      // @ts-ignore\n      heatmap = new window.ymaps.Heatmap([], {\n        radius: 15,\n        dissipating: false,\n        opacity: 0.5,\n        intensityOfMidpoint: 0.5,\n        // gradient: {\n        //   0.1: 'rgba(128, 255, 0, 0.7)',\n        //   0.2: 'rgba(255, 255, 0, 0.8)',\n        //   0.7: 'rgba(234, 72, 58, 0.9)',\n        //   1.0: 'rgba(162, 36, 25, 1)',\n        // },\n        gradient: {\n          0.0: 'rgba(126, 171, 85, 0.0)',\n          0.2: 'rgba(126, 171, 85, 0.6)',\n          0.4: 'rgba(255, 254, 85, 0.7)',\n          0.6: 'rgba(245, 193, 66, 0.8)',\n          0.8: 'rgba(223, 130, 68, 0.9)',\n          1.0: 'rgba(176, 36, 24, 1)',\n        },\n      })\n      heatmap.setMap(map, {})\n\n      map.geoObjects.add(objectManager)\n\n      updateBounds(map.getCenter(), map.getZoom())\n    }\n\n    const handlerClickToObj = (objectId: string) => {\n      const obj = objectManager.objects.getById(objectId)\n      if (obj) {\n        obj.properties.balloonContentBody = ReactDOMServer.renderToStaticMarkup(\n          InfoBalloon({\n            id: obj.properties.id,\n            address: obj.properties.address,\n            categoryName: obj.properties.category_name,\n            dead: obj.properties.dead,\n            datetime: new Date(obj.properties.datetime),\n            injured: obj.properties.injured,\n          })\n        )\n        objectManager.objects.balloon.open(objectId)\n      }\n    }\n\n    const handlerActiveChanged = (obj: any) => {\n      obj.properties.balloonContentBody = ReactDOMServer.renderToStaticMarkup(\n        InfoBalloonContent({\n          id: obj.properties.id,\n          address: obj.properties.address,\n          categoryName: obj.properties.category_name,\n          dead: obj.properties.dead,\n          datetime: new Date(obj.properties.datetime),\n          injured: obj.properties.injured,\n        })\n      )\n      handlerOpenBalloon(obj.id)\n    }\n\n    const handlerOpenBalloon = (objectId: string) => {\n      const currentParams = new URLSearchParams(document.location.search)\n      currentParams.set('active-obj', objectId)\n      window.history.pushState(null, '', `?${currentParams.toString()}`)\n    }\n\n    const handlerCloseBalloon = () => {\n      const currentParams = new URLSearchParams(document.location.search)\n      currentParams.delete('active-obj')\n      window.history.pushState(null, '', `?${currentParams.toString()}`)\n    }\n\n    const createFeature = (acc: any) => ({\n      type: 'Feature',\n      id: acc.id,\n      geometry: {\n        type: 'Point',\n        coordinates: [acc.point.latitude, acc.point.longitude],\n      },\n      properties: {\n        ...acc,\n        clusterCaption: acc.datetime.split('T')[0],\n        visible: true,\n      },\n      options: {\n        iconLayout: 'default#image',\n        // @ts-ignore\n        iconImageHref: supportedIconsBySeverity[acc.severity],\n        iconImageSize: [10, 10],\n        iconImageOffset: [-5, -5],\n\n        // preset: 'islands#circleIcon',\n        // @ts-ignore\n        iconColor: colorBySeverity[acc.severity],\n      },\n    })\n\n    const createHeatFeature = (acc: any) => ({\n      id: acc.id,\n      type: 'Feature',\n      geometry: {\n        type: 'Point',\n        coordinates: [acc.point.latitude, acc.point.longitude],\n      },\n      properties: {\n        weight: acc.severity,\n      },\n    })\n\n    const drawPoints = (accs: any[]) => {\n      objectManager.removeAll()\n      heatmap.setData([])\n      const data = accs.map((a) => createFeature(a))\n      objectManager.add(data)\n\n      const params = new URLSearchParams(window.location.search)\n      const activeObject = params.get('active-obj')\n      if (activeObject) {\n        handlerClickToObj(activeObject)\n      }\n    }\n\n    const drawHeat = (accs: any[]) => {\n      objectManager.removeAll()\n      const data = accs.map((a) => createHeatFeature(a))\n      heatmap.setData(data)\n    }\n\n    const setFilter = (filter: any) => {\n      objectManager.setFilter((f: any) => filter(f.properties))\n    }\n\n    return {\n      setMap,\n      getMap,\n      updateBounds,\n      drawPoints,\n      drawHeat,\n      setFilter,\n    }\n  })\n","import { flow, types, cast, getRoot, Instance } from 'mobx-state-tree'\n\nimport { fetchArea } from 'api'\nimport { Coordinate } from 'types'\nimport { isEmpty } from 'utils'\nimport { RootStoreType } from 'models/RootStore'\n\nconst Area = types.model('Area', {\n  id: types.string,\n  name: types.string,\n  parentId: types.string,\n  parentName: types.maybeNull(types.string),\n})\n\nconst AreaStatistics = types.model('AreaStatistics', {\n  count: types.number,\n  injured: types.number,\n  dead: types.number,\n})\n\nexport type AreaStatisticsType = Instance<typeof AreaStatistics>\n\nexport const AreaStore = types\n  .model('AreaStore', {\n    area: types.maybeNull(Area),\n    statistics: types.maybeNull(AreaStatistics),\n  })\n  .actions((self) => {\n    const loadArea = flow(function* (center: Coordinate, zoom: number) {\n      try {\n        const response = yield fetchArea(center, zoom)\n        if (isEmpty(response)) {\n          return\n        }\n        const newArea = Area.create({\n          id: response.region_slug,\n          name: response.region_name,\n          parentId: response.parent_region_slug,\n          parentName: response.parent_region_name,\n        })\n        const areaChanged = newArea.id !== self.area?.id\n        const parentChanged = newArea.parentId !== self.area?.parentId\n        self.area = newArea\n        if (areaChanged) {\n          getRoot<RootStoreType>(self).onAreaChanged()\n        }\n        if (parentChanged) {\n          getRoot<RootStoreType>(self).onParentAreaChanged()\n        }\n      } catch (error) {\n        if (error.name !== 'AbortError') {\n          throw error\n        }\n      }\n    })\n    const setStatistics = (stat: AreaStatisticsType) => {\n      self.statistics = cast(stat)\n    }\n    return {\n      loadArea,\n      setStatistics,\n    }\n  })\n","import { flow, types, getRoot } from 'mobx-state-tree'\n\nimport { fetchDtp } from 'api'\n\nimport { RootStoreType } from './RootStore'\n\nconst getYears = (startDate: string, endDate: string) => {\n  const result = []\n  const start = parseInt(startDate.split('-')[0])\n  const end = parseInt(endDate.split('-')[0])\n  for (let i = start; i <= end; i++) {\n    result.push(i)\n  }\n  return result\n}\n\nexport const TrafficAccidentStore = types\n  .model({\n    accs: types.frozen([]),\n  })\n  .actions((self) => {\n    const loadTrafficAccidents = flow(function* loadTrafficAccidents(\n      startDate: string,\n      endDate: string,\n      region: string\n    ) {\n      const root = getRoot<RootStoreType>(self)\n      root.incLoading()\n      try {\n        const data = yield fetchDtp(getYears(startDate, endDate), region)\n        self.accs = data\n          .flat()\n          .filter((a: any) => a.datetime >= startDate && a.datetime <= endDate + 'Z')\n        root.onTrafficAccidentsLoaded()\n      } catch (error) {\n        if (error.name !== 'AbortError') {\n          throw error\n        }\n      } finally {\n        root.decLoading()\n      }\n    })\n    return {\n      loadTrafficAccidents,\n    }\n  })\n","import React from 'react'\nimport { types, flow, Instance, cast } from 'mobx-state-tree'\n// @ts-ignore\nimport makeInspectable from 'mobx-devtools-mst'\n\nimport { POINTS_ZOOM } from 'utils'\n\nimport { FilterStore } from './FilterStore'\nimport { MapStore, buildSelection, passFilters } from './MapStore'\nimport { AreaStore } from './AreaStore'\nimport { TrafficAccidentStore } from './TrafficAccidentStore'\nimport { DateFilterType } from './filters/DateFilter'\n\nexport type RootStoreType = Instance<typeof RootStore>\n\nconst RootStore = types\n  .model('RootStore', {\n    filterStore: FilterStore,\n    mapStore: MapStore,\n    areaStore: AreaStore,\n    trafficAccidentStore: TrafficAccidentStore,\n    loadingCount: 0,\n  })\n  .actions((self) => {\n    var initBoundsChanged = false\n    var initFiltersLoaded = false\n\n    const afterCreate = flow(function* () {\n      setMapFromUrl()\n      yield self.filterStore.loadFilters()\n      setDatesFromUrl()\n      setFiltersFromUrl()\n      initFiltersLoaded = true\n      if (initBoundsChanged) {\n        updateUrl()\n        loadArea()\n      }\n    })\n    const loadArea = () => {\n      const { center, zoom } = self.mapStore\n      self.areaStore.loadArea(center, zoom)\n    }\n    const loadAccs = () => {\n      const { areaStore, filterStore, trafficAccidentStore } = self\n      if (areaStore.area) {\n        trafficAccidentStore.loadTrafficAccidents(\n          filterStore.startDate,\n          filterStore.endDate,\n          areaStore.area.parentId\n        )\n      }\n    }\n    const updateStat = () => {\n      const accs = self.trafficAccidentStore.accs\n      const area = self.areaStore.area\n      if (area) {\n        const top = area.id === area.parentId\n        const allAreaAccs = top ? accs : accs.filter((a: any) => a.region_slug === area.id)\n        const areaAccs = allAreaAccs.filter(prepareFilter())\n        self.areaStore.setStatistics({\n          count: areaAccs.length,\n          injured: areaAccs.reduce((s, v: any) => s + v.injured, 0),\n          dead: areaAccs.reduce((s, v: any) => s + v.dead, 0),\n        })\n      }\n    }\n    const prepareFilter = () => {\n      const selection = buildSelection(self.filterStore.filters.slice())\n      return (a: any) => passFilters(a, selection)\n    }\n    const redraw = () => {\n      const visibleAccs = self.trafficAccidentStore.accs.filter((a: any) => a.point)\n      if (self.mapStore.zoom >= POINTS_ZOOM) {\n        self.mapStore.setFilter(prepareFilter())\n        self.mapStore.drawPoints(visibleAccs)\n      } else {\n        const accs = visibleAccs.filter(prepareFilter())\n        self.mapStore.drawHeat(accs)\n      }\n    }\n    const onTrafficAccidentsLoaded = () => {\n      const accs = self.trafficAccidentStore.accs\n      self.filterStore.updateStreets(accs)\n      setStreetsFromUrl()\n      updateStat()\n      redraw()\n    }\n    const onBoundsChanged = (zoom: number, prevZoom: number) => {\n      initBoundsChanged = true\n      if (initFiltersLoaded) {\n        updateUrl()\n        loadArea()\n        if (\n          (zoom >= POINTS_ZOOM && prevZoom < POINTS_ZOOM) ||\n          (zoom < POINTS_ZOOM && prevZoom >= POINTS_ZOOM)\n        ) {\n          redraw()\n        }\n      }\n    }\n    const onDatesChanged = () => {\n      updateUrl()\n      loadAccs()\n    }\n    const onAreaChanged = () => {\n      updateStat()\n    }\n    const onParentAreaChanged = () => {\n      loadAccs()\n    }\n    const onFiltersChanged = () => {\n      updateUrl()\n      updateStat()\n      if (self.mapStore.zoom >= POINTS_ZOOM) {\n        self.mapStore.setFilter(prepareFilter())\n      } else {\n        redraw()\n      }\n    }\n    const incLoading = () => {\n      self.loadingCount += 1\n    }\n    const decLoading = () => {\n      self.loadingCount -= 1\n    }\n    const updateUrl = () => {\n      const currentParams = new URLSearchParams(document.location.search)\n      updateUrlMap(currentParams)\n      updateUrlDates(currentParams)\n      updateUrlFilters(currentParams)\n      window.history.pushState(null, '', `?${currentParams.toString()}`)\n    }\n    const updateUrlMap = (currentParams: URLSearchParams) => {\n      const { center, zoom } = self.mapStore\n      currentParams.set('center', `${center[0]}:${center[1]}`)\n      currentParams.set('zoom', String(zoom))\n    }\n    const updateUrlDates = (currentParams: URLSearchParams) => {\n      const value = (self.filterStore.filters.find((f) => f.name === 'date') as DateFilterType)\n        .value\n      currentParams.set('start_date', value.start_date)\n      currentParams.set('end_date', value.end_date)\n    }\n    const updateUrlFilters = (currentParams: URLSearchParams) => {\n      self.filterStore.filters\n        .filter((f) => f.name !== 'date')\n        .forEach((f: any) => {\n          const id = f.key || f.name\n          currentParams.delete(id)\n          const values = f.values.filter((v: any) => v.selected)\n          if (values.length > 0) {\n            currentParams.set(\n              id,\n              values.map((v: any) => (id === 'street' ? v.preview : String(v.value))).join(';')\n            )\n          }\n        })\n    }\n    const setMapFromUrl = () => {\n      const params = new URLSearchParams(document.location.search)\n      const centerStr = params.get('center')?.split(':')\n      const center = centerStr\n        ? [parseFloat(centerStr[0]), parseFloat(centerStr[1])]\n        : [55.76, 37.64]\n      const zoomStr = params.get('zoom')\n      const zoom = zoomStr ? parseInt(zoomStr, 10) : 12\n      self.mapStore.center = cast(center)\n      self.mapStore.zoom = zoom\n    }\n    const setDatesFromUrl = () => {\n      const currentParams = new URLSearchParams(document.location.search)\n      const dateFilter = self.filterStore.filters.find((f) => f.name === 'date') as DateFilterType\n      const start_date = currentParams.get('start_date')\n      const end_date = currentParams.get('end_date')\n      if (start_date && end_date) {\n        dateFilter.value = { start_date, end_date }\n      }\n    }\n    const setFiltersFromUrl = () => {\n      const currentParams = new URLSearchParams(document.location.search)\n      self.filterStore.filters\n        .filter((f) => f.name !== 'date')\n        .forEach((f: any) => {\n          const id = f.key || f.name\n          const value = currentParams.get(id)\n          if (value) {\n            const values = value.split(';')\n            f.values.forEach((fv: any) => {\n              const s = id === 'street' ? fv.preview : String(fv.value)\n              fv.selected = values.includes(s)\n            })\n          }\n        })\n    }\n    const setStreetsFromUrl = () => {\n      const currentParams = new URLSearchParams(document.location.search)\n      const streetFilter: any = self.filterStore.filters.find((f: any) => f.key === 'street')\n      const value = currentParams.get('street')\n      if (value) {\n        const values = value.split(';')\n        streetFilter.values.forEach((fv: any) => {\n          fv.selected = values.includes(fv.preview)\n        })\n      }\n    }\n    return {\n      afterCreate,\n      onBoundsChanged,\n      onAreaChanged,\n      onParentAreaChanged,\n      onTrafficAccidentsLoaded,\n      onDatesChanged,\n      onFiltersChanged,\n      incLoading,\n      decLoading,\n    }\n  })\n\nexport const rootStore = RootStore.create({\n  filterStore: {},\n  mapStore: {},\n  areaStore: {},\n  trafficAccidentStore: {},\n})\n\nmakeInspectable(rootStore)\n\nexport const RootStoreContext = React.createContext<typeof rootStore>(rootStore)\n\nexport function useStore() {\n  const store = React.useContext(RootStoreContext)\n  return store\n}\n","import React from 'react'\nimport { observer } from 'mobx-react'\n\nimport { useStore } from 'models/RootStore'\n\nexport const Loader = observer(() => {\n  const rootStore = useStore()\n  return <div className={rootStore.loadingCount > 0 ? 'loader visible' : 'loader'} />\n})\n","import React, { useCallback } from 'react'\nimport './Map.css'\nimport { observer } from 'mobx-react'\n\nimport { useStore } from 'models/RootStore'\n// import { debounce } from 'utils'\n\nexport const Map = observer(function Map() {\n  const { mapStore } = useStore()\n  // const boundsChangeHandler = useCallback( // TODO\n  //   debounce((e) => {\n  //     const { newCenter, newZoom, newBounds } = e.originalEvent\n  //     mapStore.updateBounds(newCenter, newZoom, newBounds)\n  //   }, 1000),\n  //   [mapStore]\n  // )\n  const boundsChangeHandler = useCallback(\n    (e) => {\n      const { newCenter, newZoom, newBounds } = e.originalEvent\n      mapStore.updateBounds(newCenter, newZoom, newBounds)\n    },\n    [mapStore]\n  )\n  React.useEffect(() => {\n    window.ymaps.ready(['Heatmap']).then(() => {\n      const { center, zoom } = mapStore\n      const map = new window.ymaps.Map(\n        'map',\n        {\n          center,\n          zoom,\n          controls: [],\n        },\n        {\n          avoidFractionalZoom: true,\n        }\n      )\n      mapStore.setMap(map)\n      map.events.add('boundschange', boundsChangeHandler)\n      map.controls\n        .add('zoomControl', {\n          float: 'none',\n          size: 'large', // 206\n          // position: { right: 20, top: 20 },\n        })\n        .add('geolocationControl', {\n          float: 'none',\n          // position: { right: 20, top: 20 + 206 + 16 },\n        })\n\n      // move to center\n      const updatePos = (h) => {\n        const top = (h - (206 + 16 + 28)) / 2\n        map.controls.get('zoomControl').options.set('position', { top, right: 20 })\n        map.controls\n          .get('geolocationControl')\n          .options.set('position', { top: top + 206 + 16, right: 20 })\n      }\n      updatePos(mapRef.current.offsetHeight)\n      map.events.add('sizechange', (e) => {\n        updatePos(mapRef.current.offsetHeight)\n      })\n    })\n  }, [mapStore, boundsChangeHandler])\n\n  const mapRef = React.useRef()\n\n  return <div id='map' ref={mapRef} />\n})\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport 'react-date-range/dist/styles.css' // main style file\nimport 'react-date-range/dist/theme/default.css' // theme css file\nimport { DateRangePicker, createStaticRanges } from 'react-date-range'\nimport { parseISO, format, subMonths, lastDayOfMonth, startOfMonth } from 'date-fns'\nimport ruLocale from 'date-fns/locale/ru'\n\nimport { Colors } from 'components/ui/Colors'\n\nconst DateFilterSection = ({ filter }) => {\n  const defaultRange = {\n    startDate: parseISO(filter.value.start_date),\n    endDate: parseISO(filter.value.end_date),\n    key: 'selection',\n  }\n  const [show, setShow] = React.useState(false)\n  const [range, setRange] = React.useState(defaultRange)\n  const handleChange = (e) => {\n    setRange(e.selection)\n    if (e.selection.endDate > e.selection.startDate) {\n      filter.setValue({\n        start_date: formatDate(e.selection.startDate),\n        end_date: formatDate(e.selection.endDate),\n      })\n      setShow(false)\n    }\n  }\n  const handleCancel = (e) => {\n    setShow(false)\n  }\n  return (\n    <div>\n      <div className='inputWrap'>\n        <input\n          type='text'\n          className='input'\n          onFocus={(e) => setShow(true)}\n          readOnly\n          value={formatRange(defaultRange)}\n        />\n        <svg className='icon icon-calendar'>\n          <use xlinkHref='svg/sprite.svg#calendar' />\n        </svg>\n      </div>\n      {show && (\n        <div className='date-wrap'>\n          <DateRangePicker\n            locale={ruLocale}\n            onChange={handleChange}\n            showDateDisplay={false}\n            months={2}\n            ranges={[range]}\n            rangeColors={[Colors.$grey70]}\n            inputRanges={[]}\n            staticRanges={staticRanges}\n            fixedHeight={true}\n            direction='horizontal'\n          />\n          <div className='date-bottom'>\n            <button className='btn-light' onClick={handleCancel}>\n              Отмена\n            </button>\n            {/* <button className='btn-dark' onClick={handleApply}>\n              Применить\n            </button> */}\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\nconst formatDate = (date) => format(date, 'yyyy-MM-dd')\n\nconst formatRange = (range) => {\n  const f = 'dd.MM.yyyy'\n  return `${format(range.startDate, f)} - ${format(range.endDate, f)}`\n}\n\nconst getPrevMonth = (n) => {\n  const p = subMonths(new Date(), n)\n  const s = format(p, 'LLLL', { locale: ruLocale })\n  return {\n    label: s[0].toLocaleUpperCase('ru') + s.substring(1),\n    range: () => ({ startDate: startOfMonth(p), endDate: lastDayOfMonth(p) }),\n  }\n}\n\nconst getStaticRanges = () => {\n  const result = []\n  const year = new Date().getFullYear()\n  for (let i = 1; i <= 2; i++) {\n    result.push(getPrevMonth(i))\n  }\n  for (let i = year; i > year - 6; i--) {\n    result.push({\n      label: i.toString(),\n      range: () => ({ startDate: new Date(i, 0, 1), endDate: new Date(i, 11, 31) }),\n    })\n  }\n  result.push({\n    label: 'За всё время',\n    range: () => ({ startDate: new Date(2015, 0, 1), endDate: new Date() }),\n  })\n  return createStaticRanges(result)\n}\n\nconst staticRanges = getStaticRanges()\n\nexport default observer(DateFilterSection)\n","import { observer } from 'mobx-react'\nimport React, { FC } from 'react'\n\nimport { ParticipantsFilterType } from 'models/filters/ParticipantsFilter'\n\nimport config from '../../config'\n\nconst ParticipantsFilter: FC<ParticipantsFilterType> = (filter) => (\n  <div className='participant-filter'>\n    {filter.values.map((item) => (\n      <button\n        key={item.value}\n        className={item.selected ? 'participant-item active' : 'participant-item'}\n        // selected={item.selected}\n        tabIndex={0}\n        onClick={item.selectOne}\n      >\n        {\n          <object\n            type='image/svg+xml'\n            data={`${config.STATIC_URL}${item.icon}`}\n            aria-label={item.preview}\n          />\n        }\n        <p className='subtitle3'>{item.preview}</p>\n      </button>\n    ))}\n  </div>\n)\n\nexport default observer(ParticipantsFilter)\n","import React, { FC } from 'react'\nimport { observer } from 'mobx-react'\n\nimport { SeverityFilterType } from 'models/filters/SeverityFilter'\nimport { Colors } from 'components/ui/Colors'\n\nconst SeverityFilterSection: FC<SeverityFilterType> = ({ values }) => (\n  <div>\n    {values.map((item) => (\n      <label key={item.value} className='severity-item' tabIndex={0}>\n        <input\n          type='checkbox'\n          checked={item.selected}\n          disabled={item.disabled}\n          onChange={item.changeSelection}\n        />\n        <span className='checkmark'>\n          <svg className='icon icon-check'>\n            <use xlinkHref='svg/sprite.svg#check' />\n          </svg>\n        </span>\n        <div\n          className='severity-color'\n          style={{\n            background: item.disabled ? Colors.$grey50 : item.color,\n          }}\n        />\n        <p\n          className='body1'\n          style={{\n            color: item.disabled ? Colors.$grey50 : Colors.$greyDark,\n          }}\n        >\n          {item.preview}\n        </p>\n      </label>\n    ))}\n  </div>\n)\n\nexport default observer(SeverityFilterSection)\n","import React from 'react'\nimport { observer } from 'mobx-react'\n\nconst RegionFilterSection = ({ values }) => (\n  <div className='category-item__draw' tabIndex={0}>\n    <svg className='icon icon-edit'>\n      <use xlinkHref='svg/sprite.svg#edit' />\n    </svg>\n    <button className='btn-rect'>Выделить</button>\n  </div>\n)\n\nexport default observer(RegionFilterSection)\n","import React from 'react'\nimport { observer } from 'mobx-react'\n\nimport { useStore } from 'models/RootStore'\n\nimport DateFilter from './DateFilter'\nimport ParticipantsFilter from './ParticipantsFilter'\nimport SeverityFilter from './SeverityFilter'\nimport RegionFilter from './RegionFilter'\n\nconst FilterSection = ({ filter }) => {\n  switch (filter.name) {\n    case 'date':\n      return <DateFilter filter={filter} />\n    case 'participant_categories':\n      return <ParticipantsFilter {...filter} />\n    case 'severity':\n      return <SeverityFilter {...filter} />\n    case 'region':\n      return <RegionFilter {...filter} />\n    default:\n      return null\n  }\n}\n\nconst CategoryTag = observer(({ filter }) => {\n  if (filter.values.some((v) => v.selected)) {\n    return (\n      <div className='category-tag active'>\n        <button className='btn-rect' onClick={(e) => filter.navigate()}>\n          <span>{filter.label}</span>\n        </button>\n        <button className='btn-decline' onClick={(e) => filter.reset()}>\n          <svg className='icon icon-decline'>\n            <use xlinkHref='svg/sprite.svg#decline' />\n          </svg>\n        </button>\n      </div>\n    )\n  }\n  return (\n    <div className='category-tag'>\n      <button className='btn-rect' onClick={(e) => filter.navigate()}>\n        <span>{filter.label}</span>\n      </button>\n    </div>\n  )\n})\n\nexport const FilterPanelNormal = observer(() => {\n  const { filterStore } = useStore()\n  const { filters } = filterStore\n\n  const mainFilters = filters.filter((f) => f.name !== 'category')\n  const categoryFilters = filters.filter((f) => f.name === 'category')\n\n  return (\n    <div className='filter-panel'>\n      <div className='filter-panel-normal'>\n        {mainFilters.map((f) => (\n          <div key={f.name} className='filter-item'>\n            <p className='subtitle2'>{f.label}</p>\n            <FilterSection filter={f} />\n          </div>\n        ))}\n        <div className='filter-item'>\n          <p className='subtitle2'>Фильтры</p>\n          <div className='category-filter'>\n            {categoryFilters.map((f) => (\n              <CategoryTag key={f.key} filter={f} />\n            ))}\n          </div>\n        </div>\n      </div>\n      <button className='btn-hideFilter' onClick={(e) => filterStore.setVisible(false)}>\n        <svg className='icon icon-arrow-up'>\n          <use xlinkHref='svg/sprite.svg#arrow-up' />\n        </svg>\n        <span>Скрыть</span>\n      </button>\n    </div>\n  )\n})\n","import React from 'react'\nimport { observer } from 'mobx-react'\n\nimport { useStore } from 'models/RootStore'\n\nimport DateFilter from './DateFilter'\n\nexport const FilterPanelHidden = observer(() => {\n  const { filterStore } = useStore()\n  const { filters } = filterStore\n  const dateFilter = filters.find((f) => f.name === 'date')\n  const activeFilters = filters.filter((f) => f.values?.some((v) => v.selected !== v.default)) || []\n  const text = activeFilters.map((f) => f.label).join(', ')\n  return (\n    <div className='filter-panel'>\n      <div className='filter-panel-hidden'>\n        <div className='filter-item'>\n          <p className='subtitle2'>{dateFilter.label}</p>\n          <DateFilter filter={dateFilter} />\n        </div>\n        {text && (\n          <div className='filter-item'>\n            <p className='subtitle2'>Активные фильтры</p>\n            <div className='category-filter'>{text}</div>\n          </div>\n        )}\n      </div>\n      <button className='btn-hideFilter' onClick={(e) => filterStore.setVisible(true)}>\n        <svg className='icon icon-arrow-up'>\n          <use xlinkHref='svg/sprite.svg#arrow-down' />\n        </svg>\n        <span>Показать</span>\n      </button>\n    </div>\n  )\n})\n","import React from 'react'\nimport { observer } from 'mobx-react'\n\nimport { useStore } from 'models/RootStore'\n\nconst CategoryHeader = () => {\n  const { filterStore } = useStore()\n  const filter = filterStore.filters.find((f) => f.key === filterStore.currentKey)\n  const handleBack = (e) => {\n    filterStore.setCurrentKey(null)\n    filterStore.setSearch('')\n  }\n  return (\n    <div className='filter-header'>\n      <button className='btn-back' onClick={handleBack}>\n        <svg className='icon icon-arrow-back'>\n          <use xlinkHref='svg/sprite.svg#arrow-back' />\n        </svg>\n        <span>{filter.label}</span>\n      </button>\n      {/* {selectedValues && (\n        <div className='tags-wrap'>\n          {filter.values\n            .filter((v) => v.selected)\n            .map((v) => (\n              <div key={v.value} className='category-tag-light' tabIndex={0}>\n                <button className='btn-light' onClick={(e) => v.toggle()}>\n                  <span>{v.preview}</span>\n                  <svg className='icon icon-decline'>\n                    <use xlinkHref='svg/sprite.svg#decline' />\n                  </svg>\n                </button>\n              </div>\n            ))}\n        </div>\n      )} */}\n      <div className='inputWrap'>\n        <input\n          type='text'\n          className='input'\n          placeholder='Введите название нарушения'\n          value={filterStore.search}\n          onChange={(e) => filterStore.setSearch(e.target.value)}\n        />\n        {/* maybe it should be button not just svg */}\n        <button className='btn-search'>\n          <svg className='icon icon-search'>\n            <use xlinkHref='svg/sprite.svg#search' />\n          </svg>\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default observer(CategoryHeader)\n","import React from 'react'\nimport { observer } from 'mobx-react'\n\nimport { useStore } from 'models/RootStore'\n\nimport CategoryHeader from './CategoryHeader'\n\nconst CategoryValue = observer(({ value }) => (\n  <label className='category-value severity-item' tabIndex={0}>\n    <input type='checkbox' checked={value.selected} onChange={(e) => value.toggle()} />\n    <span className='checkmark'>\n      <svg className='icon icon-check'>\n        <use xlinkHref='svg/sprite.svg#check' />\n      </svg>\n    </span>\n    <span className='value-preview body1'>{value.preview}</span>\n  </label>\n))\n\nexport const FilterPanelCategory = observer(() => {\n  const { filterStore } = useStore()\n  const { filters } = filterStore\n  const filter = filters.find((f) => f.key === filterStore.currentKey)\n  const q = filterStore.search.toLowerCase()\n  return (\n    <div className='filter-panel'>\n      <div className='filter-panel-category'>\n        <CategoryHeader />\n        <div className='panel-content'>\n          {filter.values\n            .filter((v) => v.preview.toLowerCase().includes(q))\n            .map((v) => (\n              <CategoryValue key={v.value === -1 ? v.preview : v.value} value={v} />\n            ))}\n        </div>\n      </div>\n    </div>\n  )\n})\n","import React from 'react'\nimport { observer } from 'mobx-react'\n\nimport { useStore } from 'models/RootStore'\n\nimport { FilterPanelNormal } from './FilterPanelNormal'\nimport { FilterPanelHidden } from './FilterPanelHidden'\nimport { FilterPanelCategory } from './FilterPanelCategory'\n\nconst FilterPanel = () => {\n  const { filterStore } = useStore()\n  const { filters } = filterStore\n\n  if (filters.length === 0) {\n    return null\n  }\n\n  if (filterStore.visible) {\n    if (filterStore.currentKey) {\n      return <FilterPanelCategory />\n    }\n    return <FilterPanelNormal />\n  } else {\n    return <FilterPanelHidden />\n  }\n}\n\nexport default observer(FilterPanel)\n","import React from 'react'\nimport { observer } from 'mobx-react'\n\nimport { useStore } from 'models/RootStore'\n\nimport { Colors } from './ui/Colors'\n\nconst InfoPanelObservable = observer(function InfoPanel() {\n  const { areaStore } = useStore()\n  const { area, statistics } = areaStore\n  if (!area) {\n    return null\n  }\n  return (\n    <div className='info-panel-wrap'>\n      <div className='info-panel'>\n        <h3 className='h3'>{area.name || '\\u00A0'}</h3>\n        <p className='subtitle2' style={{ color: Colors.$grey50 }}>\n          ДТП\n        </p>\n        <p className='subtitle2' style={{ color: Colors.$grey50 }}>\n          Пострадали\n        </p>\n        <p className='subtitle2' style={{ color: Colors.$grey50 }}>\n          Погибли\n        </p>\n\n        <p className='body2' style={{ color: Colors.$grey50 }}>\n          {area.parentName}\n        </p>\n        <h3 className='h3' style={{ color: Colors.$greyDark }}>\n          {statistics ? statistics.count : '-'}\n        </h3>\n        <h3 className='h3' style={{ color: Colors.$yellow }}>\n          {statistics ? statistics.injured : '-'}\n        </h3>\n        <h3 className='h3' style={{ color: Colors.$red }}>\n          {statistics ? statistics.dead : '-'}\n        </h3>\n      </div>\n    </div>\n  )\n})\n\nexport { InfoPanelObservable as InfoPanel }\n","import React from 'react'\n\nimport { Loader } from 'components/Loader'\n\nimport { Map } from './components/Map'\nimport { FilterPanel } from './components/FilterPanel'\nimport { InfoPanel } from './components/InfoPanel'\nimport { rootStore, RootStoreContext } from './models/RootStore'\n//import Toast from 'components/Toast';\n//import Layers from './components/Layers/Layers';\n//import Event from './components/Event/Event';\n//import Modal from './components/Modal';\n//import Articles from './components/News/Articles';\n//import Article from './components/News/Article';\n\nexport const App: React.FC = () => (\n  <RootStoreContext.Provider value={rootStore}>\n    <Loader />\n    <Map />\n    <div className='ui-layer'>\n      <FilterPanel />\n      <InfoPanel />\n      {/* <Toast /> */}\n      {/* <Layers /> */}\n    </div>\n    {/* <Event />*/}\n    {/*<Modal />*/}\n    {/*<Article />*/}\n    {/*<Articles />*/}\n  </RootStoreContext.Provider>\n)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as Sentry from '@sentry/browser'\n\nimport './scss/style.scss'\nimport config from 'config'\n\nimport { App } from './App'\nimport * as serviceWorker from './serviceWorker'\n\nif (process.env.NODE_ENV === 'production') {\n  Sentry.init({\n    dsn: config.SENTRY_URL,\n  })\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}